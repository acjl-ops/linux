From: John Ogness <john.ogness@linutronix.de>
Date: Tue, 26 Sep 2023 14:43:30 +0000
Subject: [PATCH 111/122] printk: nbcon: Add context to console_is_usable()

The nbcon consoles have 2 callbacks to be used for different
contexts. In order to determine if an nbcon console is usable,
console_is_usable() needs to know if it is a context that will
use the write_atomic() callback or the write_thread() callback.

Add an extra parameter @use_atomic to specify this.

Signed-off-by: John Ogness <john.ogness@linutronix.de>
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
---
 kernel/printk/internal.h |   15 +++++++++------
 kernel/printk/nbcon.c    |    6 +++---
 kernel/printk/printk.c   |    6 ++++--
 3 files changed, 16 insertions(+), 11 deletions(-)

--- a/kernel/printk/internal.h
+++ b/kernel/printk/internal.h
@@ -89,7 +89,7 @@ void nbcon_kthread_create(struct console
  * which can also play a role in deciding if @con can be used to print
  * records.
  */
-static inline bool console_is_usable(struct console *con, short flags)
+static inline bool console_is_usable(struct console *con, short flags, bool use_atomic)
 {
 	if (!(flags & CON_ENABLED))
 		return false;
@@ -98,10 +98,13 @@ static inline bool console_is_usable(str
 		return false;
 
 	if (flags & CON_NBCON) {
-		if (!con->write_atomic)
-			return false;
-		if (!con->write_thread || !con->kthread)
-			return false;
+		if (use_atomic) {
+			if (!con->write_atomic)
+				return false;
+		} else {
+			if (!con->write_thread || !con->kthread)
+				return false;
+		}
 	} else {
 		if (!con->write)
 			return false;
@@ -166,7 +169,7 @@ static inline enum nbcon_prio nbcon_get_
 static inline void nbcon_atomic_flush_all(void) { }
 static bool nbcon_atomic_emit_next_record(struct console *con) { return false; }
 
-static inline bool console_is_usable(struct console *con, short flags) { return false; }
+static inline bool console_is_usable(struct console *con, short flags, bool use_atomic) { return false; }
 
 #endif /* CONFIG_PRINTK */
 
--- a/kernel/printk/nbcon.c
+++ b/kernel/printk/nbcon.c
@@ -1008,7 +1008,7 @@ static bool nbcon_kthread_should_wakeup(
 
 		cookie = console_srcu_read_lock();
 		flags = console_srcu_read_flags(con);
-		is_usable = console_is_usable(con, flags);
+		is_usable = console_is_usable(con, flags, false);
 		console_srcu_read_unlock(cookie);
 
 		if (!is_usable)
@@ -1082,7 +1082,7 @@ static int nbcon_kthread_func(void *__co
 
 		con_flags = console_srcu_read_flags(con);
 
-		if (console_is_usable(con, con_flags)) {
+		if (console_is_usable(con, con_flags, false)) {
 			/*
 			 * Ensure this stays on the CPU to make handover and
 			 * takeover possible.
@@ -1254,7 +1254,7 @@ static void __nbcon_atomic_flush_all(u64
 			if (!(flags & CON_NBCON))
 				continue;
 
-			if (!console_is_usable(con, flags))
+			if (!console_is_usable(con, flags, true))
 				continue;
 
 			if (nbcon_seq_read(con) >= stop_seq)
--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@ -2996,7 +2996,7 @@ static bool console_flush_all(bool do_co
 			if ((flags & CON_NBCON) && con->kthread)
 				continue;
 
-			if (!console_is_usable(con, flags))
+			if (!console_is_usable(con, flags, true))
 				continue;
 			any_usable = true;
 
@@ -3873,8 +3873,10 @@ static bool __pr_flush(struct console *c
 			 * that they make forward progress, so only increment
 			 * @diff for usable consoles.
 			 */
-			if (!console_is_usable(c, flags))
+			if (!console_is_usable(c, flags, true) &&
+			    !console_is_usable(c, flags, false)) {
 				continue;
+			}
 
 			if (flags & CON_NBCON) {
 				printk_seq = nbcon_seq_read(c);
